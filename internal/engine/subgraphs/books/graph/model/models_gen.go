// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type MetadataOrError interface {
	IsMetadataOrError()
}

type Book struct {
	Isbn         string            `json:"isbn"`
	Title        *string           `json:"title"`
	Year         *int              `json:"year"`
	SimilarBooks []*Book           `json:"similarBooks"`
	Metadata     []MetadataOrError `json:"metadata"`
}

func (Book) IsEntity() {}

type Error struct {
	Code    *int    `json:"code"`
	Message *string `json:"message"`
}

func (Error) IsMetadataOrError() {}

type KeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (KeyValue) IsMetadataOrError() {}

type Library struct {
	ID   string  `json:"id"`
	Name *string `json:"name"`
}

func (Library) IsEntity() {}

type CacheControlScope string

const (
	CacheControlScopePublic  CacheControlScope = "PUBLIC"
	CacheControlScopePrivate CacheControlScope = "PRIVATE"
)

var AllCacheControlScope = []CacheControlScope{
	CacheControlScopePublic,
	CacheControlScopePrivate,
}

func (e CacheControlScope) IsValid() bool {
	switch e {
	case CacheControlScopePublic, CacheControlScopePrivate:
		return true
	}
	return false
}

func (e CacheControlScope) String() string {
	return string(e)
}

func (e *CacheControlScope) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CacheControlScope(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CacheControlScope", str)
	}
	return nil
}

func (e CacheControlScope) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
