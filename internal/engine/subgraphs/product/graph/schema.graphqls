# copied from: federation/federation-integration-testsuite-js/src/fixtures/product.ts

directive @stream on FIELD
directive @transform(from: String!) on FIELD

enum CacheControlScope {
    PUBLIC
    PRIVATE
}

directive @cacheControl(
    maxAge: Int
    scope: CacheControlScope
    inheritMaxAge: Boolean
) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION

extend type Query {
    product(upc: String!): Product
    vehicle(id: String!): Vehicle
    topProducts(first: Int = 5): [Product] @cacheControl(maxAge: 40)
    topCars(first: Int = 5): [Car]
}

type Ikea {
    asile: Int
}

type Amazon {
    referrer: String
}

union Brand = Ikea | Amazon

interface Product {
    upc: String!
    sku: String!
    name: String
    price: String
    details: ProductDetails
}

interface ProductDetails {
    country: String
}

type ProductDetailsFurniture implements ProductDetails {
    country: String
    color: String
}

type ProductDetailsBook implements ProductDetails {
    country: String
    pages: Int
}

type Furniture implements Product @key(fields: "upc") @key(fields: "sku") {
    upc: String!
    sku: String!
    name: String @cacheControl(maxAge: 30)
    price: String
    brand: Brand
    metadata: [MetadataOrError]
    details: ProductDetailsFurniture
}

extend type Book implements Product @key(fields: "isbn") {
    isbn: String! @external
    title: String @external
    year: Int @external
    upc: String!
    sku: String!
    name(delimeter: String = " "): String @requires(fields: "title year")
    price: String
    details: ProductDetailsBook
}

interface Vehicle {
    id: String!
    description: String
    price: String
}

type Car implements Vehicle @key(fields: "id") {
    id: String!
    description: String
    price: String
}

type Van implements Vehicle @key(fields: "id") {
    id: String!
    description: String
    price: String
}

union Thing = Car | Ikea

extend type User @key(fields: "id") {
    id: ID! @external
    vehicle: Vehicle
    thing: Thing
}

# Value type
type KeyValue {
    key: String!
    value: String!
}

# Value type
type Error {
    code: Int
    message: String
}

# Value type
union MetadataOrError = KeyValue | Error
