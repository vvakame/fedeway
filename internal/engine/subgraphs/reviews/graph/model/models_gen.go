// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

type MetadataOrError interface {
	IsMetadataOrError()
}

type Product interface {
	IsProduct()
	GetReviews() []*Review
}

type Vehicle interface {
	IsVehicle()
	GetRetailPrice() *string
}

type Book struct {
	Isbn           string    `json:"isbn"`
	Reviews        []*Review `json:"reviews,omitempty"`
	SimilarBooks   []*Book   `json:"similarBooks"`
	RelatedReviews []*Review `json:"relatedReviews"`
}

func (Book) IsEntity() {}

func (Book) IsProduct() {}
func (this Book) GetReviews() []*Review {
	if this.Reviews == nil {
		return nil
	}
	interfaceSlice := make([]*Review, 0, len(this.Reviews))
	for _, concrete := range this.Reviews {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type Car struct {
	ID          string  `json:"id"`
	Price       *string `json:"price,omitempty"`
	RetailPrice *string `json:"retailPrice,omitempty"`
}

func (Car) IsEntity() {}

func (Car) IsVehicle()                   {}
func (this Car) GetRetailPrice() *string { return this.RetailPrice }

type Error struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

func (Error) IsMetadataOrError() {}

type Furniture struct {
	Upc     string    `json:"upc"`
	Reviews []*Review `json:"reviews,omitempty"`
}

func (Furniture) IsEntity() {}

func (Furniture) IsProduct() {}
func (this Furniture) GetReviews() []*Review {
	if this.Reviews == nil {
		return nil
	}
	interfaceSlice := make([]*Review, 0, len(this.Reviews))
	for _, concrete := range this.Reviews {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type KeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (KeyValue) IsMetadataOrError() {}

type ReviewProduct struct {
	Upc   string `json:"upc"`
	Body  string `json:"body"`
	Stars *int   `json:"stars,omitempty"`
}

type UpdateReviewInput struct {
	ID   string  `json:"id"`
	Body *string `json:"body,omitempty"`
}

type User struct {
	ID              string          `json:"id"`
	Username        *string         `json:"username,omitempty"`
	Reviews         []*Review       `json:"reviews,omitempty"`
	NumberOfReviews int             `json:"numberOfReviews"`
	Metadata        []*UserMetadata `json:"metadata,omitempty"`
	GoodAddress     *bool           `json:"goodAddress,omitempty"`
}

func (User) IsEntity() {}

type UserMetadata struct {
	Address *string `json:"address,omitempty"`
}

type Van struct {
	ID          string  `json:"id"`
	Price       *string `json:"price,omitempty"`
	RetailPrice *string `json:"retailPrice,omitempty"`
}

func (Van) IsEntity() {}

func (Van) IsVehicle()                   {}
func (this Van) GetRetailPrice() *string { return this.RetailPrice }
