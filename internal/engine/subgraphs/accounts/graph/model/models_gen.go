// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AccountType interface {
	IsAccountType()
}

type Library struct {
	ID          string  `json:"id"`
	Name        *string `json:"name,omitempty"`
	UserAccount *User   `json:"userAccount,omitempty"`
}

func (Library) IsEntity() {}

type Name struct {
	First *string `json:"first,omitempty"`
	Last  *string `json:"last,omitempty"`
}

type PasswordAccount struct {
	Email string `json:"email"`
}

func (PasswordAccount) IsAccountType() {}

func (PasswordAccount) IsEntity() {}

type SMSAccount struct {
	Number *string `json:"number,omitempty"`
}

func (SMSAccount) IsAccountType() {}

func (SMSAccount) IsEntity() {}

type User struct {
	ID        string          `json:"id"`
	Name      *Name           `json:"name,omitempty"`
	Username  *string         `json:"username,omitempty"`
	BirthDate *string         `json:"birthDate,omitempty"`
	Account   AccountType     `json:"account,omitempty"`
	Metadata  []*UserMetadata `json:"metadata,omitempty"`
	Ssn       *string         `json:"ssn,omitempty"`
}

func (User) IsEntity() {}

type UserMetadata struct {
	Name        *string `json:"name,omitempty"`
	Address     *string `json:"address,omitempty"`
	Description *string `json:"description,omitempty"`
}

type CacheControlScope string

const (
	CacheControlScopePublic  CacheControlScope = "PUBLIC"
	CacheControlScopePrivate CacheControlScope = "PRIVATE"
)

var AllCacheControlScope = []CacheControlScope{
	CacheControlScopePublic,
	CacheControlScopePrivate,
}

func (e CacheControlScope) IsValid() bool {
	switch e {
	case CacheControlScopePublic, CacheControlScopePrivate:
		return true
	}
	return false
}

func (e CacheControlScope) String() string {
	return string(e)
}

func (e *CacheControlScope) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CacheControlScope(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CacheControlScope", str)
	}
	return nil
}

func (e CacheControlScope) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
