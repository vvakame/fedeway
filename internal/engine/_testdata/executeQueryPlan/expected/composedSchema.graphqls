directive @core(feature: String!, as: String, for: core__Purpose) on SCHEMA
directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION
directive @join__graph(name: String!, url: String!) on ENUM_VALUE
directive @join__owner(graph: join__Graph!) on OBJECT | INTERFACE
directive @join__type(graph: join__Graph!, key: join__FieldSet) on OBJECT | INTERFACE
directive @stream on FIELD
directive @tag(name: String!) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION
directive @transform(from: String!) on FIELD
union AccountType @tag(name: "from-accounts") = PasswordAccount | SMSAccount
type Amazon @join__owner(graph: PRODUCT) {
	referrer: String
}
union Body = Image | Text
type Book implements Product @join__owner(graph: BOOKS) @join__type(graph: BOOKS, key: "isbn") @join__type(graph: INVENTORY, key: "isbn") @join__type(graph: PRODUCT, key: "isbn") @join__type(graph: REVIEWS, key: "isbn") {
	isbn: String!
	title: String
	year: Int
	similarBooks: [Book]!
	metadata: [MetadataOrError]
	inStock: Boolean @join__field(graph: INVENTORY)
	isCheckedOut: Boolean @join__field(graph: INVENTORY)
	upc: String! @join__field(graph: PRODUCT)
	sku: String! @join__field(graph: PRODUCT)
	name(delimeter: String = " "): String @join__field(graph: PRODUCT)
	price: String @join__field(graph: PRODUCT)
	details: ProductDetailsBook @join__field(graph: PRODUCT)
	reviews: [Review] @join__field(graph: REVIEWS)
	relatedReviews: [Review!]! @join__field(graph: REVIEWS)
}
union Brand = Ikea | Amazon
enum CacheControlScope {
	PUBLIC
	PRIVATE
}
type Car implements Vehicle @join__owner(graph: PRODUCT) @join__type(graph: PRODUCT, key: "id") @join__type(graph: REVIEWS, key: "id") {
	id: String!
	description: String
	price: String
	retailPrice: String @join__field(graph: REVIEWS)
}
type Error {
	code: Int
	message: String
}
type Furniture implements Product @join__owner(graph: PRODUCT) @join__type(graph: PRODUCT, key: "upc") @join__type(graph: PRODUCT, key: "sku") @join__type(graph: INVENTORY, key: "sku") @join__type(graph: REVIEWS, key: "upc") {
	upc: String!
	sku: String!
	name: String
	price: String
	brand: Brand
	metadata: [MetadataOrError]
	details: ProductDetailsFurniture
	inStock: Boolean @join__field(graph: INVENTORY)
	isHeavy: Boolean @join__field(graph: INVENTORY)
	reviews: [Review] @join__field(graph: REVIEWS)
}
type Ikea @join__owner(graph: PRODUCT) {
	asile: Int
}
type Image implements NamedObject @join__owner(graph: DOCUMENTS) {
	name: String!
	attributes: ImageAttributes!
}
type ImageAttributes @join__owner(graph: DOCUMENTS) {
	url: String!
}
scalar JSON
type KeyValue {
	key: String!
	value: String!
}
type Library @join__owner(graph: BOOKS) @join__type(graph: BOOKS, key: "id") @join__type(graph: ACCOUNTS, key: "id") {
	id: ID!
	name: String
	userAccount(id: ID! = "1"): User @join__field(graph: ACCOUNTS)
}
union MetadataOrError = KeyValue | Error
type Mutation {
	login(username: String!, password: String!, userId: String): User @join__field(graph: ACCOUNTS)
	reviewProduct(input: ReviewProduct!): Product @join__field(graph: REVIEWS)
	updateReview(review: UpdateReviewInput!): Review @join__field(graph: REVIEWS)
	deleteReview(id: ID!): Boolean @join__field(graph: REVIEWS)
}
type Name @join__owner(graph: ACCOUNTS) {
	first: String
	last: String
}
interface NamedObject {
	name: String!
}
type Noop @join__owner(graph: DOCUMENTS) @join__type(graph: DOCUMENTS, key: "noop") {
	noop: String
}
type PasswordAccount @join__owner(graph: ACCOUNTS) @join__type(graph: ACCOUNTS, key: "email") {
	email: String!
}
interface Product {
	upc: String!
	sku: String!
	name: String
	price: String
	details: ProductDetails
	inStock: Boolean
	reviews: [Review]
}
interface ProductDetails {
	country: String
}
type ProductDetailsBook implements ProductDetails @join__owner(graph: PRODUCT) {
	country: String
	pages: Int
}
type ProductDetailsFurniture implements ProductDetails @join__owner(graph: PRODUCT) {
	country: String
	color: String
}
type Query {
	user(id: ID!): User @join__field(graph: ACCOUNTS)
	me: User @join__field(graph: ACCOUNTS)
	book(isbn: String!): Book @join__field(graph: BOOKS)
	books: [Book] @join__field(graph: BOOKS)
	library(id: ID!): Library @join__field(graph: BOOKS)
	body: Body! @join__field(graph: DOCUMENTS)
	product(upc: String!): Product @join__field(graph: PRODUCT)
	vehicle(id: String!): Vehicle @join__field(graph: PRODUCT)
	topProducts(first: Int = 5): [Product] @join__field(graph: PRODUCT)
	topCars(first: Int = 5): [Car] @join__field(graph: PRODUCT)
	topReviews(first: Int = 5): [Review] @join__field(graph: REVIEWS)
}
type Review @join__owner(graph: REVIEWS) @join__type(graph: REVIEWS, key: "id") {
	id: ID!
	body(format: Boolean = false): String
	author: User
	product: Product
	metadata: [MetadataOrError]
}
input ReviewProduct {
	upc: String!
	body: String!
	stars: Int
}
type SMSAccount @join__owner(graph: ACCOUNTS) @join__type(graph: ACCOUNTS, key: "number") {
	number: String
}
type Text implements NamedObject @join__owner(graph: DOCUMENTS) {
	name: String!
	attributes: TextAttributes!
}
type TextAttributes @join__owner(graph: DOCUMENTS) {
	bold: Boolean
	text: String
}
union Thing = Car | Ikea
input UpdateReviewInput {
	id: ID!
	body: String
}
type User @tag(name: "from-accounts") @join__owner(graph: ACCOUNTS) @join__type(graph: ACCOUNTS, key: "id") @join__type(graph: ACCOUNTS, key: "username name { first last }") @join__type(graph: INVENTORY, key: "id") @join__type(graph: PRODUCT, key: "id") @join__type(graph: REVIEWS, key: "id") {
	id: ID! @tag(name: "accounts")
	name: Name
	username: String
	birthDate(locale: String): String @tag(name: "admin") @tag(name: "dev")
	account: AccountType
	metadata: [UserMetadata]
	ssn: String
	goodDescription: Boolean @join__field(graph: INVENTORY)
	vehicle: Vehicle @join__field(graph: PRODUCT)
	thing: Thing @join__field(graph: PRODUCT)
	reviews: [Review] @join__field(graph: REVIEWS)
	numberOfReviews: Int! @join__field(graph: REVIEWS)
	goodAddress: Boolean @join__field(graph: REVIEWS)
}
type UserMetadata @join__owner(graph: ACCOUNTS) {
	name: String
	address: String
	description: String
}
type Van implements Vehicle @join__owner(graph: PRODUCT) @join__type(graph: PRODUCT, key: "id") @join__type(graph: REVIEWS, key: "id") {
	id: String!
	description: String
	price: String
	retailPrice: String @join__field(graph: REVIEWS)
}
interface Vehicle {
	id: String!
	description: String
	price: String
	retailPrice: String
}
enum core__Purpose {
	"""
	`EXECUTION` features provide metadata necessary to for operation execution.
	"""
	EXECUTION
	"""
	`SECURITY` features provide metadata necessary to securely resolve fields.
	"""
	SECURITY
}
scalar join__FieldSet
enum join__Graph {
	ACCOUNTS @join__graph(name: "accounts", url: "")
	BOOKS @join__graph(name: "books", url: "")
	DOCUMENTS @join__graph(name: "documents", url: "")
	INVENTORY @join__graph(name: "inventory", url: "")
	PRODUCT @join__graph(name: "product", url: "")
	REVIEWS @join__graph(name: "reviews", url: "")
}
